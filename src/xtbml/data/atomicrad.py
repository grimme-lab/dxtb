# This file is part of xtbml.

import torch
from ..constants import AA2AU

_atomic_rad = {
    "H": 0.32,
    "He": 0.37,
    "Li": 1.30,
    "Be": 0.99,
    "B": 0.84,
    "C": 0.75,
    "N": 0.71,
    "O": 0.64,
    "F": 0.60,
    "Ne": 0.62,
    "Na": 1.60,
    "Mg": 1.40,
    "Al": 1.24,
    "Si": 1.14,
    "P": 1.09,
    "S": 1.04,
    "Cl": 1.00,
    "Ar": 1.01,
    "K": 2.00,
    "Ca": 1.74,
    "Sc": 1.59,
    "Ti": 1.48,
    "V": 1.44,
    "Cr": 1.30,
    "Mn": 1.29,
    "Fe": 1.24,
    "Co": 1.18,
    "Ni": 1.17,
    "Cu": 1.22,
    "Zn": 1.20,
    "Ga": 1.23,
    "Ge": 1.20,
    "As": 1.20,
    "Se": 1.18,
    "Br": 1.17,
    "Kr": 1.16,
    "Rb": 2.15,
    "Sr": 1.90,
    "Y": 1.76,
    "Zr": 1.64,
    "Nb": 1.56,
    "Mo": 1.46,
    "Tc": 1.38,
    "Ru": 1.36,
    "Rh": 1.34,
    "Pd": 1.30,
    "Ag": 1.36,
    "Cd": 1.40,
    "In": 1.42,
    "Sn": 1.40,
    "Sb": 1.40,
    "Te": 1.37,
    "I": 1.36,
    "Xe": 1.36,
    "Cs": 2.38,
    "Ba": 2.06,
    "La": 1.94,
    "Ce": 1.84,
    "Pr": 1.90,
    "Nd": 1.88,
    "Pm": 1.86,
    "Sm": 1.85,
    "Eu": 1.83,
    "Gd": 1.82,
    "Tb": 1.81,
    "Dy": 1.80,
    "Ho": 1.79,
    "Er": 1.77,
    "Tm": 1.77,
    "Yb": 1.78,
    "Lu": 1.74,
    "Hf": 1.64,
    "Ta": 1.58,
    "W": 1.50,
    "Re": 1.41,
    "Os": 1.36,
    "Ir": 1.32,
    "Pt": 1.30,
    "Au": 1.30,
    "Hg": 1.32,
    "Tl": 1.44,
    "Pb": 1.45,
    "Bi": 1.50,
    "Po": 1.42,
    "At": 1.48,
    "Rn": 1.46,
    "Fr": 2.42,
    "Ra": 2.11,
    "Ac": 2.01,
    "Th": 1.90,
    "Pa": 1.84,
    "U": 1.83,
    "Np": 1.80,
    "Pu": 1.80,
    "Am": 1.73,
    "Cm": 1.68,
    "Bk": 1.68,
    "Cf": 1.68,
    "Es": 1.65,
    "Fm": 1.67,
    "Md": 1.73,
    "No": 1.76,
    "Lr": 1.61,
    "Rf": 1.57,
    "Db": 1.49,
    "Sg": 1.43,
    "Bh": 1.41,
    "Hs": 1.34,
    "Mt": 1.29,
    "Ds": 1.28,
    "Rg": 1.21,
    "Cn": 1.22,
    "Nh": 1.36,
    "Fl": 1.43,
    "Mc": 1.62,
    "Lv": 1.75,
    "Ts": 1.65,
    "Og": 1.57,
}

atomic_rad = AA2AU * torch.tensor(
    [
        0.00,  # dummy
        0.32,
        0.37,
        1.30,
        0.99,
        0.84,
        0.75,
        0.71,
        0.64,
        0.60,
        0.62,
        1.60,
        1.40,
        1.24,
        1.14,
        1.09,
        1.04,
        1.00,
        1.01,
        2.00,
        1.74,
        1.59,
        1.48,
        1.44,
        1.30,
        1.29,
        1.24,
        1.18,
        1.17,
        1.22,
        1.20,
        1.23,
        1.20,
        1.20,
        1.18,
        1.17,
        1.16,
        2.15,
        1.90,
        1.76,
        1.64,
        1.56,
        1.46,
        1.38,
        1.36,
        1.34,
        1.30,
        1.36,
        1.40,
        1.42,
        1.40,
        1.40,
        1.37,
        1.36,
        1.36,
        2.38,
        2.06,
        1.94,
        1.84,
        1.90,
        1.88,
        1.86,
        1.85,
        1.83,
        1.82,
        1.81,
        1.80,
        1.79,
        1.77,
        1.77,
        1.78,
        1.74,
        1.64,
        1.58,
        1.50,
        1.41,
        1.36,
        1.32,
        1.30,
        1.30,
        1.32,
        1.44,
        1.45,
        1.50,
        1.42,
        1.48,
        1.46,
        2.42,
        2.11,
        2.01,
        1.90,
        1.84,
        1.83,
        1.80,
        1.80,
        1.73,
        1.68,
        1.68,
        1.68,
        1.65,
        1.67,
        1.73,
        1.76,
        1.61,
        1.57,
        1.49,
        1.43,
        1.41,
        1.34,
        1.29,
        1.28,
        1.21,
        1.22,
        1.36,
        1.43,
        1.62,
        1.75,
        1.65,
        1.57,
    ]
)


def get_atomic_rad(sym: str) -> float:
    """
    Atomic Radii of the Elements
    M. Mantina, R. Valero, C. J. Cramer, and D. G. Truhlar,
    in CRC Handbook of Chemistry and Physics, 91st Edition (2010-2011),
    edited by W. M. Haynes (CRC Press, Boca Raton, FL, 2010), pages 9-49-9-50;
    corrected Nov. 17, 2010 for the 92nd edition.
    """

    rad = _atomic_rad.get(sym, 0.0) * AA2AU
    if rad <= 0:
        raise ValueError
    return rad
