"""Samples for test of halogen bond correction."""

from typing import Dict
import torch
from xtbml.typing import Molecule, Tensor
from xtbml.utils import symbol2number


class Record(Molecule):
    """Format of reference records."""

    energy: Tensor
    """Reference value for energy from halogen bond correction."""


samples: Dict[str, Record] = {
    "br2nh3": {
        "numbers": symbol2number(["Br", "Br", "N", "H", "H", "H"]),
        "positions": torch.tensor(
            [
                0.00000000000000,
                0.00000000000000,
                3.11495251300000,
                0.00000000000000,
                0.00000000000000,
                -1.25671880600000,
                0.00000000000000,
                0.00000000000000,
                -6.30201130100000,
                0.00000000000000,
                1.78712709700000,
                -6.97470840000000,
                -1.54769692500000,
                -0.89356260400000,
                -6.97470840000000,
                1.54769692500000,
                -0.89356260400000,
                -6.97470840000000,
            ],
        ).reshape((-1, 3)),
        "energy": torch.tensor(2.4763110097465683e-3),
    },
    "br2och2": {
        "numbers": symbol2number(["Br", "Br", "O", "C", "H", "H"]),
        "positions": torch.tensor(
            [
                -1.78533374700000,
                -3.12608299900000,
                0.00000000000000,
                0.00000000000000,
                0.81604226400000,
                0.00000000000000,
                2.65828699900000,
                5.29707580600000,
                0.00000000000000,
                4.88597158600000,
                4.86116137300000,
                0.00000000000000,
                5.61550975300000,
                2.90822215900000,
                0.00000000000000,
                6.28907612600000,
                6.39963643500000,
                0.00000000000000,
            ],
        ).reshape((-1, 3)),
        "energy": torch.tensor(-6.7587305781592112e-4),
    },
    "finch": {
        "numbers": symbol2number(["F", "I", "N", "C", "H"]),
        "positions": torch.tensor(
            [
                0.00000000000000,
                0.00000000000000,
                4.37637862700000,
                0.00000000000000,
                0.00000000000000,
                0.69981844700000,
                0.00000000000000,
                0.00000000000000,
                -4.24181123900000,
                0.00000000000000,
                0.00000000000000,
                -6.39520691700000,
                0.00000000000000,
                0.00000000000000,
                -8.41387269200000,
            ],
        ).reshape((-1, 3)),
        "energy": torch.tensor(1.1857937381795408e-2),
    },
}
