# This file is part of dxtb.
#
# SPDX-Identifier: Apache-2.0
# Copyright (C) 2024 Grimme Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Run tests for building the Hamiltonian matrix.
References calculated with tblite 0.3.0.
"""

from __future__ import annotations

from math import sqrt

import pytest
import torch
from tad_mctc.batch import pack

from dxtb import GFN2_XTB, IndexHelper
from dxtb._src.integral.driver.pytorch import IntDriverPytorch as IntDriver
from dxtb._src.integral.driver.pytorch import OverlapPytorch as Overlap
from dxtb._src.param import Param
from dxtb._src.typing import DD, Tensor
from dxtb._src.xtb.gfn2 import GFN2Hamiltonian

from ..conftest import DEVICE
from .samples import samples

small = ["H2", "LiH", "S2", "SiH4"]

# No overlap!
ref = {
    "H2": torch.tensor(
        [
            *[-3.91986886330804e-1, -7.10344830094570e-1, -7.10344830094570e-1],
            *[-3.91986886330804e-1],
        ],
        dtype=torch.float64,
    ).reshape(2, 2),
    "LiH": torch.tensor(
        [
            *[-1.85652593278629e-1, -1.32503346243859e-1, -1.32503346243859e-1],
            *[-1.32503346243859e-1, -5.11314980009571e-1, -1.32503346243859e-1],
            *[-7.93540992090888e-2, -7.93540992090888e-2, -7.93540992090888e-2],
            *[-5.67490975937946e-1, -1.32503346243859e-1, -7.93540992090888e-2],
            *[-7.93540992090888e-2, -7.93540992090888e-2, -5.67490975937946e-1],
            *[-1.32503346243859e-1, -7.93540992090888e-2, -7.93540992090888e-2],
            *[-7.93540992090888e-2, -5.67490975937946e-1, -5.11314980009571e-1],
            *[-5.67490975937946e-1, -5.67490975937946e-1, -5.67490975937946e-1],
            *[-3.91761150304657e-1],
        ],
        dtype=torch.float64,
    ).reshape(5, 5),
    "S2": torch.tensor(
        [
            *[-7.35145168851922e-1, -5.76455469048441e-1, -5.76455469048441e-1],
            *[-5.76455469048441e-1, -3.78932593408957e-1, -3.78932593408957e-1],
            *[-3.78932593408957e-1, -3.78932593408957e-1, -3.78932593408957e-1],
            *[-7.69842185412757e-1, -8.16534240351844e-1, -8.16534240351844e-1],
            *[-8.16534240351844e-1, -7.11124165876788e-1, -7.11124165876788e-1],
            *[-7.11124165876788e-1, -7.11124165876788e-1, -7.11124165876788e-1],
            *[-5.76455469048441e-1, -4.17765769244959e-1, -4.17765769244959e-1],
            *[-4.17765769244959e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-8.16534240351844e-1, -7.93531808806201e-1, -7.93531808806201e-1],
            *[-7.93531808806201e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.76455469048441e-1, -4.17765769244959e-1, -4.17765769244959e-1],
            *[-4.17765769244959e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-8.16534240351844e-1, -7.93531808806201e-1, -7.93531808806201e-1],
            *[-7.93531808806201e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.76455469048441e-1, -4.17765769244959e-1, -4.17765769244959e-1],
            *[-4.17765769244959e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-8.16534240351844e-1, -7.93531808806201e-1, -7.93531808806201e-1],
            *[-7.93531808806201e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.69842185412757e-1, -8.16534240351844e-1, -8.16534240351844e-1],
            *[-8.16534240351844e-1, -7.11124165876788e-1, -7.11124165876788e-1],
            *[-7.11124165876788e-1, -7.11124165876788e-1, -7.11124165876788e-1],
            *[-7.35145168851922e-1, -5.76455469048441e-1, -5.76455469048441e-1],
            *[-5.76455469048441e-1, -3.78932593408957e-1, -3.78932593408957e-1],
            *[-3.78932593408957e-1, -3.78932593408957e-1, -3.78932593408957e-1],
            *[-8.16534240351844e-1, -7.93531808806201e-1, -7.93531808806201e-1],
            *[-7.93531808806201e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.76455469048441e-1, -4.17765769244959e-1, -4.17765769244959e-1],
            *[-4.17765769244959e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-8.16534240351844e-1, -7.93531808806201e-1, -7.93531808806201e-1],
            *[-7.93531808806201e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.76455469048441e-1, -4.17765769244959e-1, -4.17765769244959e-1],
            *[-4.17765769244959e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-8.16534240351844e-1, -7.93531808806201e-1, -7.93531808806201e-1],
            *[-7.93531808806201e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.76455469048441e-1, -4.17765769244959e-1, -4.17765769244959e-1],
            *[-4.17765769244959e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-7.11124165876788e-1, -5.06786853369552e-1, -5.06786853369552e-1],
            *[-5.06786853369552e-1, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-7.90334123556902e-2, -7.90334123556902e-2, -7.90334123556902e-2],
            *[-3.78932593408957e-1, -2.20242893605476e-1, -2.20242893605476e-1],
            *[-2.20242893605476e-1, -2.27200179659920e-2, -2.27200179659920e-2],
            *[-2.27200179659920e-2, -2.27200179659920e-2, -2.27200179659920e-2],
        ],
        dtype=torch.float64,
    ).reshape(18, 18),
    "SiH4": torch.tensor(
        [
            *[-5.52421014778594e-1, -3.94095353144021e-1, -3.94095353144021e-1],
            *[-3.94095353144021e-1, -2.96900602546706e-1, -2.96900602546706e-1],
            *[-2.96900602546706e-1, -2.96900602546706e-1, -2.96900602546706e-1],
            *[-8.79823684667296e-1, -8.79823684667296e-1, -8.79823684667296e-1],
            *[-8.79823684667296e-1, -3.94095353144021e-1, -2.35769691509448e-1],
            *[-2.35769691509448e-1, -2.35769691509448e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -5.80507239433161e-1, -5.80507239433161e-1],
            *[-5.80507239433161e-1, -5.80507239433161e-1, -3.94095353144021e-1],
            *[-2.35769691509448e-1, -2.35769691509448e-1, -2.35769691509448e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -5.80507239433161e-1],
            *[-5.80507239433161e-1, -5.80507239433161e-1, -5.80507239433161e-1],
            *[-3.94095353144021e-1, -2.35769691509448e-1, -2.35769691509448e-1],
            *[-2.35769691509448e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-5.80507239433161e-1, -5.80507239433161e-1, -5.80507239433161e-1],
            *[-5.80507239433161e-1, -2.96900602546706e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -2.96900602546706e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-2.96900602546706e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -4.13801903148179e-2, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.13801903148179e-2],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -2.96900602546706e-1, -1.38574940912133e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -2.96900602546706e-1],
            *[-1.38574940912133e-1, -1.38574940912133e-1, -1.38574940912133e-1],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.13801903148179e-2],
            *[-4.13801903148179e-2, -4.13801903148179e-2, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-8.79823684667296e-1, -5.80507239433161e-1, -5.80507239433161e-1],
            *[-5.80507239433161e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-3.91823589915583e-1, -6.98232664598717e-1, -6.98232664598717e-1],
            *[-6.98232664598717e-1, -8.79823684667296e-1, -5.80507239433161e-1],
            *[-5.80507239433161e-1, -5.80507239433161e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -6.98232664598717e-1, -3.91823589915583e-1],
            *[-6.98232664598717e-1, -6.98232664598717e-1, -8.79823684667296e-1],
            *[-5.80507239433161e-1, -5.80507239433161e-1, -5.80507239433161e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -6.98232664598717e-1],
            *[-6.98232664598717e-1, -3.91823589915583e-1, -6.98232664598717e-1],
            *[-8.79823684667296e-1, -5.80507239433161e-1, -5.80507239433161e-1],
            *[-5.80507239433161e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-4.79036928570672e-1, -4.79036928570672e-1, -4.79036928570672e-1],
            *[-6.98232664598717e-1, -6.98232664598717e-1, -6.98232664598717e-1],
            *[-3.91823589915583e-1],
        ],
        dtype=torch.float64,
    ).reshape(13, 13),
}


def run(
    numbers: Tensor,
    positions: Tensor,
    par: Param,
    ref: Tensor,
    dd: DD,
    skip_overlap: bool = True,
) -> None:
    tol = sqrt(torch.finfo(dd["dtype"]).eps) * 10

    ihelp = IndexHelper.from_numbers(numbers, par)
    driver = IntDriver(numbers, par, ihelp, **dd)
    overlap = Overlap(**dd)
    h0 = GFN2Hamiltonian(numbers, par, ihelp, **dd)

    driver.setup(positions)

    s = None if skip_overlap is True else overlap.build(driver)
    h = h0.build(positions, s)
    assert pytest.approx(h.cpu(), abs=tol) == h.mT.cpu()
    assert pytest.approx(h.cpu(), abs=tol) == ref.cpu()


# No overlap!
@pytest.mark.parametrize("dtype", [torch.float, torch.double])
@pytest.mark.parametrize("name", small)
def test_single(dtype: torch.dtype, name: str) -> None:
    dd: DD = {"dtype": dtype, "device": DEVICE}

    sample = samples[name]
    numbers = sample["numbers"].to(DEVICE)
    positions = sample["positions"].to(**dd)
    _ref = ref[name].to(**dd)

    run(numbers, positions, GFN2_XTB, _ref, dd)


@pytest.mark.parametrize("dtype", [torch.float, torch.double])
@pytest.mark.parametrize("name1", small)
@pytest.mark.parametrize("name2", ["LiH"])
def test_batch(dtype: torch.dtype, name1: str, name2: str) -> None:
    dd: DD = {"dtype": dtype, "device": DEVICE}

    sample1, sample2 = samples[name1], samples[name2]
    numbers = pack(
        (
            sample1["numbers"].to(DEVICE),
            sample2["numbers"].to(DEVICE),
        )
    )
    positions = pack(
        (
            sample1["positions"].to(**dd),
            sample2["positions"].to(**dd),
        )
    )
    _ref = pack(
        (
            ref[name1].to(**dd),
            ref[name2].to(**dd),
        )
    )

    run(numbers, positions, GFN2_XTB, _ref, dd)
