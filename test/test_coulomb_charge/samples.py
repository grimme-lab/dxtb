"""
Data for testing Coulomb contribution.
"""

import torch

from dxtb.typing import Molecule, Tensor, TypedDict

from ..molecules import merge_nested_dicts, mols


class Refs(TypedDict):
    """Format of reference records containing GFN1-xTB and GFN2-xTB reference values."""

    q: Tensor
    """Atomic or shell-resolved partial charges for this structure."""

    es2: Tensor
    """Reference values for ES2 (GFN1-xTB)"""

    es3: Tensor
    """Reference values for ES3 (GFN1-xTB)"""


class Record(Molecule, Refs):
    """Store for molecular information and reference values"""


refs: dict[str, Refs] = {
    "MB16_43_01": {
        "es2": torch.tensor(0.10952019883948200),
        "es3": torch.tensor(0.0212785489857197),
        "q": torch.tensor(
            [
                7.73347900345264e-1,
                1.07626888948184e-1,
                -3.66999593831010e-1,
                4.92833325937897e-2,
                -1.83332156197733e-1,
                2.33302086605469e-1,
                6.61837152062315e-2,
                -5.43944165050002e-1,
                -2.70264356583716e-1,
                2.66618968841682e-1,
                2.62725033202480e-1,
                -7.15315510172571e-2,
                -3.73300777019193e-1,
                3.84585237785621e-2,
                -5.05851088366940e-1,
                5.17677238544189e-1,
            ]
        ),
    },
    "MB16_43_02": {
        "es2": torch.tensor(0.16666303125798329),
        "es3": torch.tensor(0.0155668621882796),
        "q": torch.tensor(
            [
                7.38394711236234e-2,
                -1.68354976558608e-1,
                -3.47642833746823e-1,
                -7.05489267186003e-1,
                7.73548301641266e-1,
                2.30207581365386e-1,
                1.02748501676354e-1,
                9.47818107467040e-2,
                2.44260351729187e-2,
                2.34984927037408e-1,
                -3.17839896393030e-1,
                6.67112994818879e-1,
                -4.78119977010488e-1,
                6.57536027459275e-2,
                1.08259054549882e-1,
                -3.58215329983396e-1,
            ]
        ),
    },
    "MB16_43_07": {
        "es2": torch.tensor(0.12017418620257683),
        "es3": torch.tensor(0.0),
        "q": torch.tensor(  # shell-resolved charges
            [
                8.85960229060055e-1,
                -1.03567241653662e0,
                2.34499192077770e-1,
                -2.18333480864186e-2,
                1.09026104661485e0,
                -7.54283954798938e-1,
                4.12740327203921e-2,
                -9.60021563849638e-3,
                5.17672944681095e-2,
                -1.05238375989861e-2,
                5.94332546515988e-2,
                -3.94897989828280e-1,
                1.44506731071946e-2,
                1.57870128213110e-1,
                -4.64405557396352e-1,
                4.78122334280047e-1,
                -1.01437364107707e0,
                9.10337331767967e-1,
                -4.61579000227231e-1,
                9.07619848805192e-2,
                -3.07310018122722e-2,
                1.13955875471381e-1,
                -3.99913576087036e-1,
                1.04872002787662e-2,
                4.12951024314537e-1,
                -5.26874026571100e-2,
                4.04435991881125e-1,
                -2.70107073714884e-2,
                3.13675308978710e-1,
                -9.44236655190031e-1,
                1.75329569882602e-1,
                -4.26004749886597e-1,
                1.24860566181157e0,
                -6.46424080267374e-1,
            ]
        ),
    },
    "MB16_43_08": {
        "es2": torch.tensor(0.11889887832100766),
        "es3": torch.tensor(0.0),
        "q": torch.tensor(  # shell-resolved charges
            [
                9.06259904944829e-1,
                -1.11730821567902e0,
                2.78017329305492e-1,
                -7.80028989546297e-1,
                1.11352815063389e0,
                -6.98290073981154e-1,
                2.03943236255318e-1,
                -5.29902840441233e-1,
                4.38219939650397e-2,
                -1.86746328945826e-2,
                4.65996457236599e-2,
                4.97590807484258e-1,
                -2.50441962186972e-1,
                4.83295451755440e-2,
                -2.26559244782012e-2,
                4.50331992744248e-2,
                -2.11569328297532e-2,
                3.12470620007346e-1,
                -9.15589243372491e-1,
                1.06394261835743e0,
                -6.71952361588756e-1,
                1.82322476598938e0,
                -9.26110009158329e-1,
                9.78357111140355e-1,
                -7.84824170464332e-1,
                -9.43549308434806e-2,
                -8.78133979988158e-3,
                -7.07783143624696e-2,
                -3.36692984665466e-2,
                6.75375129657761e-1,
                -7.01857024422455e-1,
                2.11598132242645e-1,
                -6.01715925641418e-1,
            ]
        ),
    },
    "SiH4": {
        "es2": torch.tensor(4.3803610149365790e-003),
        "es3": torch.tensor(-2.9771152185276151e-005),
        "q": torch.tensor(  # shell-resolved charges
            [
                0.65663937010219842,
                3.5838834166484368e-2,
                -0.41737062303296546,
                -7.1859260070046282e-2,
                3.0823647611154144e-3,
                -7.1859260070044950e-2,
                3.0823647611152557e-3,
                -7.1859260070046727e-2,
                3.0823647611154179e-3,
                -7.1859260070045616e-2,
                3.0823647611153034e-3,
            ]
        ),
    },
}


extra: dict[str, Record] = {
    "SiH4_atom": {
        "es2": torch.tensor(5.0778974565885598e-004),
        "es3": torch.tensor(-2.9771152185276151e-005),
        "numbers": mols["SiH4"]["numbers"],
        "positions": mols["SiH4"]["positions"],
        "q": torch.tensor(
            [
                -8.41282505804719e-2,
                2.10320626451180e-2,
                2.10320626451178e-2,
                2.10320626451179e-2,
                2.10320626451179e-2,
            ]
        ),
    },
}


samples: dict[str, Record] = {**merge_nested_dicts(mols, refs), **extra}
